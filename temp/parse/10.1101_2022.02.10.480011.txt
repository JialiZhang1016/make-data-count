Title: "polishCLR: a Nextflow workflow for polishing PacBio CLR genome assemblies" 
1 
 
2 
Authors: Jennifer Chang1,2,3*, Amanda R. Stahlke4*, Sivanandan Chudalayandi3, Benjamin D. 
3 
Rosen5, Anna K. Childers4, Andrew Severin3** 
4 
 
5 
1. USDA, Agricultural Research Service, Jamie Whitten Delta States Research Center, 
6 
Genomics and Bioinformatics Research Unit, 141 Experiment Station Road, Stoneville, MS 
7 
38776, USA 
8 
2. Oak Ridge Institute for Science and Education, P.O. Box 117, Oak Ridge, TN 37831, USA 
9 
3. Genome Informatics Facility, Office of Biotechnology, Iowa State University, Ames, Iowa 
10 
50010, USA 
11 
JC: jennifer.chang.bioinform@gmail.com, ORCID: 0000-0002-8381-3765 
12 
SC: csiva@iastate.edu  
13 
4. USDA, Agricultural Research Service, Beltsville Agricultural Research Center, Bee Research 
14 
Laboratory, 10300 Baltimore Avenue, Beltsville MD 20705, USA 
15 
ARS: amandastahlke@usda.gov, ORCID: 0000-0001-5724-598X  
16 
AKC: anna.childers@usda.gov ORCID: 0000-0002-0747-8539 
17 
5. USDA, Agricultural Research Service, Beltsville Agricultural Research Center, Animal 
18 
Genomics and Improvement Laboratory, 10300 Baltimore Avenue, Beltsville, MD 20705, USA 
19 
BDR: ben.rosen@usda.gov, ORCID: 0000-0001-9395-8346 
20 
 
21 
*co-first authors contributed equally 
22 
**Author for Correspondence: Andrew Severin, Genome Informatics Facility, Iowa State 
23 
University, Ames, Iowa, USA, 50010, (515) 294-1320, severin@iastate.edu 
 
24 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Abstract  
25 
Long-read sequencing has revolutionized genome assembly, yielding highly contiguous, 
26 
chromosome-level contigs. However, assemblies from some third generation long read 
27 
technologies, such as Pacific Biosciences (PacBio) Continuous Long Reads (CLR), have a high 
28 
error rate. Such errors can be corrected with short reads through a process called polishing. 
29 
Although best practices for polishing non-model de novo genome assemblies were recently 
30 
described by the Vertebrate Genome Project (VGP) Assembly community, there is a need for a 
31 
publicly available, reproducible workflow that can be easily implemented and run on a 
32 
conventional high performance computing environment. Here, we describe polishCLR 
33 
(https://github.com/isugifNF/polishCLR), a reproducible Nextflow workflow that implements best 
34 
practices for polishing assemblies made from CLR data. PolishCLR can be initiated from 
35 
several input options that extend best practices to suboptimal cases. It also provides re-entry 
36 
points throughout several key processes including identifying duplicate haplotypes in 
37 
purge_dups, allowing a break for scaffolding if data are available, and throughout multiple 
38 
rounds of polishing and evaluation with Arrow and FreeBayes. PolishCLR is containerized and 
39 
publicly available for the greater assembly community as a tool to complete assemblies from 
40 
existing, error-prone long-read data.  
41 
 
 
42 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Main 
43 
Long reads, including those generated by third-generation sequencing platforms such as 
44 
Pacific Biosciences (PacBio) and Oxford Nanopore Technology (ONT), have revolutionized 
45 
genome assembly (Childers et al., 2021; Hotaling et al., 2021; Rhie et al., 2021). However, until 
46 
recent advances (Hon et al., 2020; Wang et al., 2021), long-read sequencing technologies have 
47 
had high error rates (5-15%), especially among indels (Watson & Warr, 2019). Thus, the vast 
48 
majority of long-read data that is currently publicly available yields assemblies with low overall 
49 
consensus accuracy, which, if left uncorrected, negatively impacts downstream analyses, such 
50 
as gene annotation (Watson & Warr, 2019). These assembly errors require correction with an 
51 
additional higher fidelity read set, such as short-read Illumina data, in a process called polishing 
52 
(Chin et al., 2016; Helper et al., 2016; Walker et al., 2014).   
53 
Polishing can be a complex process, with high computational cost, non-trivial file-
54 
handling, and issues around special cases that must be resolved. For example, the long-read 
55 
contig assembly should ideally be polished with high-fidelity reads from the same individual, but 
56 
this may not be technically feasible when sufficient DNA cannot be extracted from individual 
57 
specimens, for example in small-bodied organisms such as many insects. In such cases, it is 
58 
necessary to modify parameters in the standard workflow. Best practices for de novo, 
59 
chromosome-scale vertebrate genome assembly from error prone PacBio continuous long 
60 
reads (CLR) reads were recently described (Rhie et al., 2021), however it can be challenging to 
61 
run this code and reproduce widely. In order to produce the best possible genome assemblies 
62 
using existing data from species regardless of their position in the tree of life, the genome 
63 
assembly community needs a publicly available, flexible and reproducible workflow that is 
64 
containerized so it can be run on any conventional HPC.  
65 
Bioinformatic pipelines with complex entrance and decision points, such as polishing, 
66 
are inherently difficult to track, develop, and debug. Increasing interest in workflow development 
67 
systems that track data and software provenance, enable scalability and reproducibility, and re-
68 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
entrant code (Wratten et al., 2021) have led to the development of several workflow languages, 
69 
largely inspired by GNU Make (Amstutz et al., 2016; KÃ¶ster & Rahmann, 2012; Stallman & 
70 
McGrath, 1991). Nextflow is a Domain Specific Language (Di Tommaso et al., 2017) that 
71 
currently leads workflow systems in terms of ease of scripting and submitting to cloud 
72 
computing resources (Fjukstad & Bongo, 2017; Jackson et al., 2021; Leipzig, 2017; Spjuth et 
73 
al., 2020). A key benefit of Nextflow compared to earlier workflow languages is being able to 
74 
submit jobs to a local machine, an HPC, or cloud-based compute environments. These features 
75 
empower a large range of bioinformatic pipelines, for example, initial read processing and 
76 
annotation lift-over (Federico et al., 2019; Talenti & Prendergast, 2021).  In this paper, we 
77 
describe polishCLR, a reproducible Nextflow workflow which implements the current best 
78 
practices for polishing CLR assemblies and is flexible to multiple input assembly and sample 
79 
considerations.  
80 
The polishCLR workflow can be easily initiated from three input cases (Fig. 1). In the first 
81 
case (Case 1), users may start with an unresolved primary assembly with (e.g., the output of 
82 
FALCON 2-asm (Chin et al., 2016)) or without (e.g., the output of Canu or wtdbg2 (Koren et al., 
83 
2017; Ruan & Li, 2020)) associated contigs. Additionally, it can handle a haplotype-resolved but 
84 
unpolished set (Case 2) (e.g., the output of FALCON-Unzip 3-unzip (Chin et al., 2016)). In the 
85 
ideal case (Case 3), the pipeline is initiated with a haplotype-resolved, CLR long-read polished 
86 
set of primary and alternate contigs (e.g., the output of FALCON-Unzip 4-polish). In all cases, 
87 
inclusion of organellar genomes, e.g., the mitochondrial genome, will improve the polishing of 
88 
nuclear mitochondrial or plasmid pseudogenes (Howe et al., 2021). Organellar genomes should 
89 
be generated and polished separately for best results, using pipelines such as the mitochondrial 
90 
companion to polishCLR, polishCLRmt (Stahlke et al, in prep) or mitoVGP (Formenti et al., 
91 
2021). To allow for the inclusion of scaffolding before final polishing (e.g., Durand et al., 2016) 
92 
and increase the potential for gap-filling across correctly oriented scaffolded contigs, the core 
93 
workflow is divided into two steps, controlled by a --step parameter flag.  
94 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
In --step 1, if initiating the workflow under Case 1 or 2, unpolished primary contigs are 
95 
merged with the organellar genome and associated contigs or alternate haplotypes if available, 
96 
then polished with a single round of Arrow long-read polishing (Pacific BioScience) before 
97 
entering the core workflow (controlled by --arrow01 true). During Arrow steps (here and later in 
98 
Step 2), polishCLR improves re-entry and computational resource use by delineating at least 
99 
seven Nextflow processes: 1) indexing each contig, 2) creating a pbmm2 index of the assembly, 
100 
3) aligning PacBio reads to the assembly, 4) submitting a GCpp Arrow job for each contig in 
101 
parallel, 5) combining the separate contig variant calling format (VCF) files, 6) reformatting 
102 
Arrow generated VCF for Merfin filtering (Formenti et al., 2021), and 7) converting the resultant 
103 
VCF back to FASTA format. Then, in all three cases, the core workflow employs purge_dups v. 
104 
1.2.5 (Guan et al., 2020) to remove duplicated sequence at the ends of separated primary 
105 
contigs, with cutoffs automatically estimated from a generated histogram of k-mers. The 
106 
histogram is captured as one of the relevant outputs for users to review. Purged primary 
107 
sequences are then concatenated to the alternate haplotype contigs and the combined alternate 
108 
set is purged of duplicates. BUSCO completeness metrics (Manni et al., 2021; Seppey et al., 
109 
2019; Simao et al., 2015; Waterhouse et al., 2018) are generated for the primary contigs before 
110 
and after removing duplicated content to ensure that cutoff parameters are effective and do not 
111 
remove too much genic content. The eukaryotic BUSCO database is used by default, but users 
112 
may provide a designated lineage (controlled by a --busco-lineage flag). If additional data are 
113 
available, this de-duplicated primary contig assembly can then be scaffolded by the user before 
114 
initiating the second phase of the workflow.   
115 
In --step 2, the primary, alternate, and organellar assemblies are merged and polished 
116 
with an additional round of Arrow, followed by two rounds of FreeBayes (Garrison & Marth, 
117 
2012). Indeed, the iterative nature of polishing benefits from the re-entrant caching and 
118 
templates of the workflow. By default, this second round of Arrow-identified variants are only 
119 
filtered via Merfin if the CLR and the Illumina reads came from the same specimen, adding 
120 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
additional Nextflow processes to the Arrow delineation described above to create a meryl 
121 
genome database and perform filtering (McCartney et. al, unpublished data). However, if short-
122 
read data are from a different specimen than the long-read-based contig assembly, then Merfin 
123 
filtering can be turned off to avoid over-polishing with the parameter flag --same-specimen false. 
124 
As with Arrow, polishCLR takes advantage of Nextflow in seven processes to implement 
125 
FreeBayes: 1) creating contig windows, 2) generating a meryl database from the genome, 3) 
126 
aligning Illumina short reads, 4) polishing via FreeBayes, 5) combining windowed VCF files, 6) 
127 
filtering VCFs by Merfin, 7) and converting VCFs to FASTA. Throughout the polishCLR 
128 
workflow, reports are automatically generated to assess genome assembly quality, including k-
129 
mer based completeness and consensus accuracy QV scores via Merqury (Rhie et al., 2020), 
130 
as well as genome size distribution statistics generated with BBMap (e.g., N50) (Bushnell, 
131 
2014). These reports allow users to understand how the assembly changed through each major 
132 
phase of the workflow. The complete, detailed pipeline can be viewed in Supplemental Figure 1.  
133 
The polishCLR workflow is publicly available (https://github.com/isugifNF/polishCLR), 
134 
reproducible, interoperable, easily portable, and can be run on a conventional HPC or extended 
135 
to cloud computing resources simply by swapping out the Nextflow config file. Software 
136 
dependencies are listed in a conda environment file. Its use has been demonstrated on several 
137 
arthropod species assemblies as part of the Ag100Pest Initiative (Childers et al., 2021). 
138 
Runtimes and summaries from each of the three starting input cases are included 
139 
(Supplementary Table S1; Stahlke and Coates, 2022) with a full genome announcement 
140 
forthcoming (Stahlke et al., unpublished data). The polishCLR workflow will increase the 
141 
efficiency of polishing many genomes and reduce the potential of human error in this multistep 
142 
process. Despite the much-reduced error rate of PacBio HiFi and ONT reads, polishing 
143 
approaches continue to be an important component of accurate genome assembly (Shafin et 
144 
al., 2021). Although this pipeline was not designed to polish with ONT reads, the workflow is 
145 
available on GitHub and welcomes any future contributions.  
146 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
 
147 
Acknowledgements 
148 
This work was supported by the U.S. Department of Agriculture, Agricultural Research Service 
149 
(USDA-ARS) and used resources provided by the SCINet project of the USDA-ARS, ARS 
150 
project number 0500-00093-001-00-D. JC was supported, in part, by an appointment to the 
151 
Research Participation Program at the Agricultural Research Service, United States Department 
152 
of Agriculture, administered by the Oak Ridge Institute for Science and Education through an 
153 
interagency agreement between the U.S. Department of Energy and USDA-ARS under contract 
154 
number DE-AC05-06OR23100. This workflow was developed as part of the USDA-ARS 
155 
Ag100Pest Initiative. The authors thank members of the USDA-ARS Ag100Pest Team and 
156 
SCINet Virtual Resource Support Core (VRSC) for fruitful discussions and troubleshooting 
157 
throughout the development of this workflow. All opinions expressed in this paper are the 
158 
author's and do not necessarily reflect the policies and views of USDA, DOE, or ORAU/ORISE. 
159 
Mention of trade names or commercial products in this publication is solely for the purpose of 
160 
providing specific information and does not imply recommendation or endorsement by the U.S. 
161 
Department of Agriculture. USDA is an equal opportunity provider and employer. 
162 
 
 
163 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
References 
164 
Amstutz, P., Crusoe, M. R., TijaniÄ, N., Chapman, B., Chilton, J., Heuer, M., Kartashov, A., 
165 
Leehr, D., MÃ©nager, H., & Nedeljkovich, M. (2016). Common workflow language, v1. 0.  
166 
Bushnell, B. (2014). BBTools software package. URL http://sourceforge. net/projects/bbmap, 
167 
578, 579.  
168 
Childers, A. K., Geib, S. M., Sim, S. B., Poelchau, M. F., Coates, B. S., Simmonds, T. J., Scully, 
169 
E. D., Smith, T. P. L., Childers, C. P., Corpuz, R. L., Hackett, K., & Scheffler, B. (2021). 
170 
The USDA-ARS Ag100Pest Initiative: High-Quality Genome Assemblies for Agricultural 
171 
Pest Arthropod Research. Insects, 12(7). https://doi.org/10.3390/insects12070626  
172 
Chin, C. S., Peluso, P., Sedlazeck, F. J., Nattestad, M., Concepcion, G. T., Clum, A., Dunn, C., 
173 
O'Malley, R., Figueroa-Balderas, R., Morales-Cruz, A., Cramer, G. R., Delledonne, M., 
174 
Luo, C., Ecker, J. R., Cantu, D., Rank, D. R., & Schatz, M. C. (2016). Phased diploid 
175 
genome assembly with single-molecule real-time sequencing. Nat Methods, 13(12), 
176 
1050-1054. https://doi.org/10.1038/nmeth.4035  
177 
Di Tommaso, P., Chatzou, M., Floden, E. W., Barja, P. P., Palumbo, E., & Notredame, C. 
178 
(2017). Nextflow enables reproducible computational workflows. Nat Biotechnol, 35(4), 
179 
316-319. https://doi.org/10.1038/nbt.3820  
180 
Durand, N. C., Robinson, J. T., Shamim, M. S., Machol, I., Mesirov, J. P., Lander, E. S., & 
181 
Aiden, E. L. (2016). Juicebox Provides a Visualization System for Hi-C Contact Maps 
182 
with Unlimited Zoom. Cell Syst, 3(1), 99-101. https://doi.org/10.1016/j.cels.2015.07.012  
183 
Federico, A., Karagiannis, T., Karri, K., Kishore, D., Koga, Y., Campbell, J. D., & Monti, S. 
184 
(2019). Pipeliner: A Nextflow-based framework for the definition of sequencing data 
185 
processing pipelines. Frontiers in genetics, 10, 614.  
186 
Fjukstad, B., & Bongo, L. A. (2017). A review of scalable bioinformatics pipelines. Data Science 
187 
and Engineering, 2(3), 245-251.  
188 
Formenti, G., Rhie, A., Balacco, J., Haase, B., Mountcastle, J., Fedrigo, O., Brown, S., 
189 
Capodiferro, M. R., Al-Ajli, F. O., Ambrosini, R., Houde, P., Koren, S., Oliver, K., Smith, 
190 
M., Skelton, J., Betteridge, E., Dolucan, J., Corton, C., Bista, I., . . . Vertebrate Genomes 
191 
Project, C. (2021). Complete vertebrate mitogenomes reveal widespread repeats and 
192 
gene duplications. Genome Biol, 22(1), 120. https://doi.org/10.1186/s13059-021-02336-
193 
9  
194 
Formenti, G., Rhie, A., Walenz, B. P., Thibaud-Nissen, F., Shafin, K., Koren, S., Myers, E. W., 
195 
Jarvis, E. D., & Phillippy, A. M. (2021). Merfin: improved variant filtering and polishing via 
196 
k-mer validation. bioRxiv, 2021.2007.2016.452324. 
197 
https://doi.org/10.1101/2021.07.16.452324  
198 
Garrison, E. P., & Marth, G. T. (2012). Haplotype-based variant detection from short-read 
199 
sequencing. arXiv: Genomics.  
200 
Guan, D., McCarthy, S. A., Wood, J., Howe, K., Wang, Y., & Durbin, R. (2020). Identifying and 
201 
removing haplotypic duplication in primary genome assemblies. Bioinformatics, 36(9), 
202 
2896-2898. https://doi.org/10.1093/bioinformatics/btaa025 
203 
Hepler, N.L., Brown, M., Smith, M.L., Katzenstein, D., Paxinos, E.E. and Alexander, D., 2016. 
204 
An improved circular consensus algorithm with an application to detect HIV-1 Drug-
205 
Resistance associated mutations (DRAMs). In Conference on Advances in Genome 
206 
Biology and Technology.  
207 
Hon, T., Mars, K., Young, G., Tsai, Y. C., Karalius, J. W., Landolin, J. M., Maurer, N., Kudrna, 
208 
D., Hardigan, M. A., Steiner, C. C., Knapp, S. J., Ware, D., Shapiro, B., Peluso, P., & 
209 
Rank, D. R. (2020). Highly accurate long-read HiFi sequencing data for five complex 
210 
genomes. Sci Data, 7(1), 399. https://doi.org/10.1038/s41597-020-00743-4  
211 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Hotaling, S., Sproul, J. S., Heckenhauer, J., Powell, A., Larracuente, A. M., Pauls, S. U., Kelley, 
212 
J. L., & Frandsen, P. B. (2021). Long Reads Are Revolutionizing 20 Years of Insect 
213 
Genome Sequencing. Genome Biol Evol, 13(8). https://doi.org/10.1093/gbe/evab138  
214 
Howe, K., Chow, W., Collins, J., Pelan, S., Pointon, D.-L., Sims, Y., Torrance, J., Tracey, A., & 
215 
Wood, J. (2021). Significantly improving the quality of genome assemblies through 
216 
curation. GigaScience, 10(1). https://doi.org/10.1093/gigascience/giaa153  
217 
Jackson, M., Kavoussanakis, K., & Wallace, E. W. J. (2021). Using prototyping to choose a 
218 
bioinformatics workflow management system. PLoS Comput Biol, 17(2), e1008622. 
219 
https://doi.org/10.1371/journal.pcbi.1008622  
220 
Koren, S., Walenz, B. P., Berlin, K., Miller, J. R., Bergman, N. H., & Phillippy, A. M. (2017). 
221 
Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and 
222 
repeat separation. Genome Res, 27(5), 722-736. https://doi.org/10.1101/gr.215087.116  
223 
KÃ¶ster, J., & Rahmann, S. (2012). Snakemakeâa scalable bioinformatics workflow engine. 
224 
Bioinformatics, 28(19), 2520-2522.  
225 
Leipzig, J. (2017). A review of bioinformatic pipeline frameworks. Brief Bioinform, 18(3), 530-
226 
536. https://doi.org/10.1093/bib/bbw020  
227 
Manni, M., Berkeley, M. R., Seppey, M., Simao, F. A., & Zdobnov, E. M. (2021). BUSCO 
228 
Update: Novel and Streamlined Workflows along with Broader and Deeper Phylogenetic 
229 
Coverage for Scoring of Eukaryotic, Prokaryotic, and Viral Genomes. Mol Biol Evol, 
230 
38(10), 4647-4654. https://doi.org/10.1093/molbev/msab199 
231 
McCartney, A. M., Shafin, K., Alonge, M., Bzikadze, A. V., Formenti, G., Fungtammasan, A., ... 
232 
& Rhie, A. Chasing perfection: validation and polishing strategies for telomere-to-
233 
telomere genome assemblies. unpublished data 
234 
https://doi.org/10.1101/2021.07.02.450803, last accessed February 2, 2022 
235 
Rhie, A., McCarthy, S. A., Fedrigo, O., Damas, J., Formenti, G., Koren, S., Uliano-Silva, M., 
236 
Chow, W., Fungtammasan, A., Kim, J., Lee, C., Ko, B. J., Chaisson, M., Gedman, G. L., 
237 
Cantin, L. J., Thibaud-Nissen, F., Haggerty, L., Bista, I., Smith, M., . . . Jarvis, E. D. 
238 
(2021). Towards complete and error-free genome assemblies of all vertebrate species. 
239 
Nature, 592(7856), 737-746. https://doi.org/10.1038/s41586-021-03451-0  
240 
Rhie, A., Walenz, B. P., Koren, S., & Phillippy, A. M. (2020). Merqury: reference-free quality, 
241 
completeness, and phasing assessment for genome assemblies. Genome Biol, 21(1), 
242 
245. https://doi.org/10.1186/s13059-020-02134-9.  
243 
Ruan, J., & Li, H. (2020). Fast and accurate long-read assembly with wtdbg2. Nat Methods, 
244 
17(2), 155-158. https://doi.org/10.1038/s41592-019-0669-3  
245 
Seppey, M., Manni, M., & Zdobnov, E. M. (2019). BUSCO: Assessing Genome Assembly and 
246 
Annotation Completeness. Methods Mol Biol, 1962, 227-245. 
247 
https://doi.org/10.1007/978-1-4939-9173-0_14  
248 
Shafin, K., Pesout, T., Chang, P. C., Nattestad, M., Kolesnikov, A., Goel, S., Baid, G., 
249 
Kolmogorov, M., Eizenga, J. M., Miga, K. H., Carnevali, P., Jain, M., Carroll, A., & Paten, 
250 
B. (2021). Haplotype-aware variant calling with PEPPER-Margin-DeepVariant enables 
251 
high accuracy in nanopore long-reads. Nat Methods, 18(11), 1322-1332. 
252 
https://doi.org/10.1038/s41592-021-01299-w  
253 
Simao, F. A., Waterhouse, R. M., Ioannidis, P., Kriventseva, E. V., & Zdobnov, E. M. (2015). 
254 
BUSCO: assessing genome assembly and annotation completeness with single-copy 
255 
orthologs. Bioinformatics, 31(19), 3210-3212. 
256 
https://doi.org/10.1093/bioinformatics/btv351  
257 
Spjuth, O., Capuccini, M., Carone, M., Larsson, A., Schaal, W., Novella, J. A., Stein, O., 
258 
Ekmefjord, M., Di Tommaso, P., & Floden, E. (2020). Approaches for containerized 
259 
scientific workflows in cloud environments with applications in life science. Preprints.  
260 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Stahlke, A.R.; Coates, B.S.. (2022). Data from polishCLR: Example input genome assemblies. 
261 
Ag Data Commons. https://doi.org/10.15482/USDA.ADC/1524676. Accessed 2022-02-
262 
09. 
263 
Stallman, R. M., & McGrath, R. (1991). GNU Make-A Program for Directing Recompilation.  
264 
Talenti, A., & Prendergast, J. (2021). nf-LO: A Scalable, Containerized Workflow for Genome-to-
265 
Genome Lift Over. Genome Biology and Evolution, 13(9). 
266 
https://doi.org/10.1093/gbe/evab183  
267 
Walker, B. J., Abeel, T., Shea, T., Priest, M., Abouelliel, A., Sakthikumar, S., Cuomo, C. A., 
268 
Zeng, Q., Wortman, J., Young, S. K., & Earl, A. M. (2014). Pilon: an integrated tool for 
269 
comprehensive microbial variant detection and genome assembly improvement. PLoS 
270 
One, 9(11), e112963. https://doi.org/10.1371/journal.pone.0112963  
271 
Wang, Y., Zhao, Y., Bollas, A., Wang, Y., & Au, K. F. (2021). Nanopore sequencing technology, 
272 
bioinformatics and applications. Nat Biotechnol, 39(11), 1348-1365. 
273 
https://doi.org/10.1038/s41587-021-01108-x  
274 
Waterhouse, R. M., Seppey, M., Simao, F. A., Manni, M., Ioannidis, P., Klioutchnikov, G., 
275 
Kriventseva, E. V., & Zdobnov, E. M. (2018). BUSCO Applications from Quality 
276 
Assessments to Gene Prediction and Phylogenomics. Mol Biol Evol, 35(3), 543-548. 
277 
https://doi.org/10.1093/molbev/msx319  
278 
Watson, M., & Warr, A. (2019). Errors in long-read assemblies can critically affect protein 
279 
prediction. Nat Biotechnol, 37(2), 124-126. https://doi.org/10.1038/s41587-018-0004-z  
280 
Wratten, L., Wilm, A., & Goke, J. (2021). Reproducible, scalable, and shareable analysis 
281 
pipelines with bioinformatics workflow managers. Nat Methods, 18(10), 1161-1168. 
282 
https://doi.org/10.1038/s41592-021-01254-9  
283 
 
284 
 
 
285 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Figures & Tables 
286 
 
287 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Figure 1. Diagram of polishCLR workflow for three input cases. Polishing steps 1 and 2 are run 
288 
separately to accommodate an optional scaffolding step. Blue arrows indicate processes while 
289 
black boxes indicate products. The dotted arrow indicates that the manual scaffolding step is 
290 
optional and not within the scope of this pipeline. 
291 
 
 
292 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
 
293 
294 
  
295 
Supplemental Figure 1. Detailed diagram of the polishCLR pipeline. PacBio CLR long reads, 
296 
Hi-C data, Illumina short reads, and organellar input data are shown in the green boxes. A 
297 
detailed view of the Arrow and FreeBayes polish steps are expanded below separately, with the 
298 
optional Merfin filtering during the Arrow polishing step shown in purple. Merfin filtering is part of 
299 
all FreeBayes polishing steps. 
300 
 
 
301 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
Case
Input stage 
of Falcon 
assembly 
Input Genome 
Size (Mb) / 
Number of 
contigs  
Starting 
QV 
Final QV
CPU 
hours
Output Genome 
Size (Mb) / Number 
of contigs 
1 
2-asm-
falcon/ 
501.287 / 789 
31.8218 
40.3033 
211.3
 
500.578 / 799  
2 
3-unzip/ 
515.499 / 1125 
31.8492 
38.9997 
224.2
 
511.878 / 1022 
3 
4-polish/ 
509.063 / 882  
38.8556 
41.9163 
195.0
 
509.052 / 882  
 
302 
Supplemental Table 1. The polishCLR workflow was benchmarked on the primary contigs of 
303 
Helicoverpa zea generated by FALCON (Chin et al. 2016). Metrics for each assembly include 
304 
starting pseudo-haploid primary and alternate combined genome size (Mb) and number of 
305 
contigs, initial quality scores, CPU hours through the pipeline final quality scores, and final 
306 
genome size and number of contigs. This table provides an indication of scalability of the 
307 
pipeline on a SLURM managed HPC. 
308 
 
309 
.
CC-BY 4.0 International license
available under a
(which was not certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made 
The copyright holder for this preprint
this version posted February 11, 2022. 
; 
https://doi.org/10.1101/2022.02.10.480011
doi: 
bioRxiv preprint 
